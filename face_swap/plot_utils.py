import numpy as np

import cv2
from IPython.display import clear_output
from IPython.display import display
from PIL import Image


def plot_sample(images_a, images_b,
                predict_fun_a, predict_fun_b,
                tanh_fix=False, save_to=None):
    """
    Plot samples results for current models with comparisons between faces
    :param images_a:
    :param images_b:
    :param predict_fun_a: function to generate samples from images_a
    :param predict_fun_b: function to generate samples from images_b
    :param tanh_fix: whether to realign prediction values to 0-1 scale before move to 256 RGB schema
    (needed exactly if models output is generated by tanh activation function)
    :param save_to:
    :return:
    """
    test_a = images_a[0:14]
    test_b = images_b[0:14]

    figure_a = np.stack([
                        test_a,
                        predict_fun_a(test_a),
                        predict_fun_b(test_a),
                        ], axis=1)
    figure_b = np.stack([
                        test_b,
                        predict_fun_a(test_b),
                        predict_fun_b(test_b),
                        ], axis=1)

    figure = np.concatenate([figure_a, figure_b], axis=0)
    figure = figure.reshape((4, 7) + figure.shape[1:])
    figure = stack_images(figure)

    if tanh_fix:
        figure = np.clip((figure + 1) * 255 / 2, 0, 255).astype('uint8')
    else:
        figure = np.clip(figure * 255, 0, 255).astype('uint8')

    if save_to:
        cv2.imwrite(save_to, figure)
    else:
        figure = cv2.cvtColor(figure, cv2.COLOR_BGR2RGB)
        #plt.imshow(figure)
        #plt.show()
        display(Image.fromarray(figure))
        # crashes in notebooks
        #cv2.imshow('', figure)
        #cv2.waitKey(0)


def get_transpose_axes( n ):
    if n % 2 == 0:
        y_axes = list( range( 1, n-1, 2 ) )
        x_axes = list( range( 0, n-1, 2 ) )
    else:
        y_axes = list( range( 0, n-1, 2 ) )
        x_axes = list( range( 1, n-1, 2 ) )
    return y_axes, x_axes, [n-1]


def stack_images( images ):
    images_shape = np.array( images.shape )
    new_axes = get_transpose_axes( len( images_shape ) )
    new_shape = [ np.prod( images_shape[x] ) for x in new_axes ]
    return np.transpose(
        images,
        axes = np.concatenate( new_axes )
        ).reshape( new_shape )